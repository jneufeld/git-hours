[package]
name = "yeesh"
version = "0.1.0"
authors = ["Jonathan Neufeld <jneufeld@alumni.ubc.ca>"]
edition = "2021"

[dependencies]

# Justification: convenience
#
# This is the first time I've used a dependency for error handling. My
# understanding, based on `https://blessed.rs`, is that `anyhow` is best for
# the average application. I'm curious how it'll feel and wonder how it could
# affect performance -- even though obviously this isn't the type of program
# where performance is critical.
anyhow = "1.0"

# Justification: sanity
#
# Seriously, who wants to implement their own regex engine for every project?
regex = "1.7"

# Justification: convenience
#
# Feature-rich crates like clap are capable of more but donny doesn't need that.
# Conversely, writing arg parsing with the standard library is fine but not
# always convenient. This is somewhere inbetween.
pico-args = "0.5"

# Justification: performance
#
# Regular expressions should be compiled only once, and the `regex` crate
# recommends using `lazy_static` to accomplish this. The alternative is either
# messy code or the anti-pattern of re-compiling regular expressions.
lazy_static = "1.4.0"

# Justification: convenience
#
# The `chrono` crate provides more features, but this crate suffices and is much
# smaller. Parsing dates and times is not provided by the standard library and
# is too difficult to implement by hand.
#
# `macros` makes creating dates and times more ergonomic in code.
#
# `parsing` makes it easy to create dates and times from raw input.
time = { version = "0.3.17", features = ["macros", "parsing"] }

# Following the best recommendations I know to optimize for binary size above
# other factors like speed:
#
# https://github.com/johnthagen/min-sized-rust#strip-symbols-from-binary
[profile.release]
strip = true
lto = true
opt-level = "z"
